;; Sang Nguyen - CS 3210 - Fall 2017
;; ==================================
;; count-inversions function: count inversion function 
;; checks the list and compares the elements in the list. 
;;If the elements are equal add one to the count.
;; lst - a list of numbers
;; Assumptions:
;; 1. The list contain no duplicates
(defun count-inversions (lst)
  (cond ((equal (car (cdr lst)) nil) 0)
        ((> (car lst) (car (cdr lst)))
         (+ 1 (count-inversions (cdr lst))))
        (t (count-inversions (cdr lst)))
  )
)
;; test plan for count-inversions:
;; category / description	data        expected result
;; ———————————————————------------------------------------------
;; list1			'()		    0
;; list2                   	'(1)                0	
;; list3               	      '(7 8 9 10)           0
;; list4		   '(1 2 3 5 4 6 7 8)  	    1		
(setf data1 '())
(setf data2 '(1))
(setf data3 '(7 8 9 10))
(setf data4 '(1 2 3 5 4 6 7 8))

;; Sang Nguyen - CS 3210 - Fall 2017
;; ==================================
;; is-almost-sorted function: is-almost-sorted function goes
;; through the list and counts the amount of time that the 
;; list is is inverted. It then checks if the number is less 
;; than 0.2n, if so it returns a T, else it returns nil if false.
;; if the list is empty or the list is sorted, it prints out
;; "the list is sorted"
;; lst - a list of numbers
;; Assumptions:
;; 1. The list contains no duplicates

(defun is-almost-sorted (lst)
  (cond ((equal (count-inversions lst) 0) "the list is sorted")
        ((<= (count-inversions lst) (* .2 (length lst))))
  )
)
;; test plan for count-inversions:
;; category / description	data	       expected result
;; ————————————————————-------------------------------------------
;; empty list			'()	      "the list is sorted" 
;; list with 1 element		'(1)           "the list is sorted"   	
;; list > size one            '(1 2 4 3)              NIL
;; etc		  '(1 2 7 4 8 1 13 15 19 20 21 22)     T		

(setf list1 '())
(setf list2 '(1))
(setf list3 '(1 2 4 3))
(setf list4 '(1 2 7 4 8 1 13 15 19 20 21 22))


(count-inversions data1)
(count-inversions data2)
(count-inversions data3)
(count-inversions data4)
(is-almost-sorted list1)
(is-almost-sorted list2)
(is-almost-sorted list3)
(is-almost-sorted list4)
